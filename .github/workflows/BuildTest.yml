name: Build and Test on Windows

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'logs/**'
  pull_request:
    branches:
      - master

env:
  GIT_AUTHOR_NAME: "github-actions"
  GIT_COMMITTER_NAME: "github-actions"
  GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GIT_COMMITTER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

jobs:
  Build_And_Test_Logs_To_File:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio latest
        uses: microsoft/setup-msbuild@v1.3
        with:
          vs-version: 'latest'

      - name: Generate timestamp
        id: timestamp
        run: |
          $date = Get-Date -Format "yyyyMMdd_HHmmss"
          echo "timestamp=$date" >> $env:GITHUB_OUTPUT

      - name: Setup log directory
        run: |
          # 在仓库根目录创建logs文件夹
          New-Item -ItemType Directory -Force -Path logs | Out-Null

      - name: Compile Demo Programs
        run: |
          # 使用仓库根目录的绝对路径
          $logFile = "$env:GITHUB_WORKSPACE\logs\BuildTest_${{ steps.timestamp.outputs.timestamp }}.log"
          
          function Log-Message {
            param([string]$message)
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            "[$timestamp] $message" | Out-File -FilePath $logFile -Append -Encoding utf8
          }

          Log-Message "Starting compilation process..."
          cd examples
          
          # 编译并记录详细输出
          Log-Message "Compiling demo1.cpp..."
          g++.exe demo1.cpp -o demo1.exe -lole32 2>&1 | ForEach-Object {
            Log-Message "COMPILE OUTPUT: $_"
          }
          if ($LASTEXITCODE -eq 0) {
            Log-Message "SUCCESS: demo1.cpp compiled"
          } else {
            Log-Message "ERROR: demo1.cpp compilation failed (exit code $LASTEXITCODE)"
            exit 1
          }
          
          Log-Message "Compiling demo2.cpp..."
          g++.exe demo2.cpp -o demo2.exe -lole32 2>&1 | ForEach-Object {
            Log-Message "COMPILE OUTPUT: $_"
          }
          if ($LASTEXITCODE -eq 0) {
            Log-Message "SUCCESS: demo2.cpp compiled"
          } else {
            Log-Message "ERROR: demo2.cpp compilation failed (exit code $LASTEXITCODE)"
            exit 1
          }
          
          Log-Message "Compiling demo3.cpp..."
          g++.exe demo3.cpp -o demo3.exe -lole32 2>&1 | ForEach-Object {
            Log-Message "COMPILE OUTPUT: $_"
          }
          if ($LASTEXITCODE -eq 0) {
            Log-Message "SUCCESS: demo3.cpp compiled"
          } else {
            Log-Message "ERROR: demo3.cpp compilation failed (exit code $LASTEXITCODE)"
            exit 1
          }
          
          Log-Message "Compiling demo4.cpp..."
          g++.exe demo4.cpp -o demo4.exe -lole32 2>&1 | ForEach-Object {
            Log-Message "COMPILE OUTPUT: $_"
          }
          if ($LASTEXITCODE -eq 0) {
            Log-Message "SUCCESS: demo4.cpp compiled"
          } else {
            Log-Message "ERROR: demo4.cpp compilation failed (exit code $LASTEXITCODE)"
            exit 1
          }
          
          Log-Message "Compiling demo5.cpp..."
          g++.exe demo5.cpp -o demo5.exe -lole32 2>&1 | ForEach-Object {
            Log-Message "COMPILE OUTPUT: $_"
          }
          if ($LASTEXITCODE -eq 0) {
            Log-Message "SUCCESS: demo5.cpp compiled"
          } else {
            Log-Message "WARNING: demo5.cpp compilation failed (exit code $LASTEXITCODE)"
          }

      - name: Run Demo
        run: |
          # 使用仓库根目录的绝对路径
          $logFile = "$env:GITHUB_WORKSPACE\logs\BuildTest_${{ steps.timestamp.outputs.timestamp }}.log"
          
          function Log-Message {
            param([string]$message)
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            "[$timestamp] $message" | Out-File -FilePath $logFile -Append -Encoding utf8
          }

          cd examples
          Log-Message "Starting demo execution..."
          
          .\demo1.exe 2>&1 | ForEach-Object {
            Log-Message "DEMO1 OUTPUT: $_"
          }
          Log-Message "Demo1 exit code: $LASTEXITCODE"
          
          .\demo2.exe 2>&1 | ForEach-Object {
            Log-Message "DEMO2 OUTPUT: $_"
          }
          Log-Message "Demo2 exit code: $LASTEXITCODE"
          
          .\demo3.exe 2>&1 | ForEach-Object {
            Log-Message "DEMO3 OUTPUT: $_"
          }
          Log-Message "Demo3 exit code: $LASTEXITCODE"
          
          .\demo4.exe 2>&1 | ForEach-Object {
            Log-Message "DEMO4 OUTPUT: $_"
          }
          Log-Message "Demo4 exit code: $LASTEXITCODE"
          
          .\demo5.exe 2>&1 | ForEach-Object {
            Log-Message "DEMO5 OUTPUT: $_"
          }
          Log-Message "Demo5 exit code: $LASTEXITCODE"

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs/
          retention-days: 3

  Update_Logs:
    runs-on: windows-latest
    needs: Build_And_Test_Logs_To_File
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build logs
        uses: actions/download-artifact@v4
        with:
          name: build-logs
          path: logs/

      - name: Commit and push logs
        run: |
          git add logs/
          $changes = git status --porcelain
          if ($changes) {
            git commit -m "Auto-update build logs [skip ci]"
            git push
            Write-Output "Logs updated successfully"
          } else {
            Write-Output "No log changes to commit"
          }